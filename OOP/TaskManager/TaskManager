import org.w3c.dom.ls.LSOutput;

import java.sql.Array;
import java.sql.SQLOutput;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Objects;
import java.util.Scanner;

public class TaskManager {

    private ArrayList<Task> tasksList = new ArrayList<Task>();
    private User currentUser;
    private static final UserManager usManager = new UserManager();
    public static String[] menuOptions = {
            "Change user",
            "Display all tasks",
            "Add a task",
            "Remove a task",
            "Change task description",
            "Change task status",
            "Change task priority",
            "End"
    };
    public static final Scanner sc = new Scanner(System.in);

    public UserManager getUserManager() {
        return usManager;
    }

    public void selectWhatToDo(){
        System.out.println("Please enter the number of an option you'd like to select:");
        for (int i=0; i<menuOptions.length; i++){
            System.out.println((i+1) + ". " + menuOptions[i]);
        }
        try {
            int userChoice = sc.nextInt();
            sc.nextLine();
            if (0 < userChoice && userChoice <= menuOptions.length) {
                switch (userChoice) {
                    case 1 -> login();
                    case 2 -> showAllTasks();
                    case 3 -> addTask();
                    case 4 -> deleteTask();
                    case 5 -> changeTaskDescription();
                    case 6 -> changeTaskStatus();
                    case 7 -> changeTaskPriority();
                    case 8 -> logOut();
                }
            } else {
                System.out.println("Please enter the number within the set range.");
                selectWhatToDo();
            }
        } catch (InputMismatchException e){
            System.out.println("Please enter a valid number, not string.");
            sc.nextLine();
            selectWhatToDo();
        }
    }

    public void reassignTaskIds(){
        int i = 1;
        for (Task tsk : tasksList){
            tsk.setTaskId(i);
            i++;
        }
    }

    public void login(){
        System.out.println("What do you like to do?");
        System.out.println("1 - sign in");
        System.out.println("2 - create an account");
        int userChoice = sc.nextInt();
        sc.nextLine();
        System.out.println("Please enter your username: ");
        String userName = sc.nextLine();
        System.out.println("Please enter your password: ");
        String userPassword = sc.nextLine();
        if (userChoice == 1){
            currentUser = usManager.signIn(userName, userPassword);
            if (currentUser != null) {
                System.out.println("Welcome, " + currentUser.getUserName() + "!");
                selectWhatToDo();
            } else {
                login();
            }
        } else if (userChoice == 2) {
            System.out.println("Please confirm your password: ");
            String passwordConfirm = sc.nextLine();
            if (Objects.equals(userPassword, passwordConfirm)){
                currentUser = usManager.createUser(userName, userPassword, "General User");
                System.out.println("Welcome, " + currentUser.getUserName() + "!");
                selectWhatToDo();
            } else {
                System.out.println("The confirmation of the password shall be the same as the password!");
                login();
            }
        }
    }

    public void printAllTasks() {
        if(Objects.equals(usManager.checkUserRights(currentUser), "Administrator")) {
            if (tasksList.isEmpty()) {
                System.out.println("The current list of tasks is empty.");
            } else {
                for (Task task : tasksList) {
                    System.out.println(task.printTask());
                }
            }
        } else {
            ArrayList<Task> taskListOfGU = currentUser.getAllTasks();
            if (taskListOfGU.isEmpty()) {
                System.out.println("The current list of tasks is empty.");
            } else {
                for (Task task : taskListOfGU) {
                    System.out.println(task.printTask());
                }
            }
        }
    }

    public void showAllTasks(){
        printAllTasks();
        selectWhatToDo();
    }

    public void addTask() {
        User assignedUser;

        System.out.println("Please enter the task title:");
        String taskTitle = sc.nextLine();
        System.out.println("Please enter one of the possible priorities of the task: Low, Moderate, Urgent:");
        String taskPriority = sc.nextLine().trim().toUpperCase().replace(" ", "_");
        if (Objects.equals(currentUser.getUserRole(), "Administrator")) {
            System.out.println("Please enter the name of the user you want to assign to this task: ");
            String userName = sc.nextLine();
            assignedUser = usManager.checkIfUserExist(userName);
        } else {
            assignedUser = currentUser;
        }
        int taskId = tasksList.size() + 1;
        try {

            Task tsk = new Task(taskId, taskTitle, Task.Priority.valueOf(taskPriority), assignedUser);
            tasksList.add(tsk);
            assignedUser.addTaskToTheUserTaskList(tsk);
            System.out.println("The task is successfully created!");
        } catch (Exception e) {
            System.out.println("The error occured while creating the task: " + e);
            sc.nextLine();
            selectWhatToDo();
        }
        selectWhatToDo();
    }

    public void deleteTask(){
        printAllTasks();
        if(tasksList.isEmpty()){
            System.out.println("You cannot delete a task from empty list.");
        } else {
            System.out.println("Please indicate the number of the task you'd like to delete:");
            int taskId = sc.nextInt();
            sc.nextLine();
            try{
                Task tsk = tasksList.remove(taskId-1);
                System.out.printf("The task %s was successfully deleted!\n", tsk.getTaskDescription());
                reassignTaskIds();
            } catch (Exception e) {
                System.out.println("The error occured while removing the task: " + e);
                selectWhatToDo();
            }
        }
        selectWhatToDo();
    }

    public void changeTaskDescription(){
        printAllTasks();
        if (tasksList.isEmpty()) {
            System.out.println("You cannot change the description of non-existent task.");
        } else {
            System.out.println("Please, enter the id of a task you'd like to change a description for: ");

            int taskId = sc.nextInt();
            sc.nextLine();

            System.out.println("Please, enter the description of a task you want to set: ");
            String newDescriptionInput = sc.nextLine().trim();

            try {
                Task tsk = tasksList.get(taskId-1);
                tsk.setTaskDescription(newDescriptionInput);
            } catch (IndexOutOfBoundsException e) {
                System.out.println("Task ID not found.");
            } catch (Exception e) {
                System.out.println("An error occurred while changing the task priority: " + e.getMessage());
            }
        }
        selectWhatToDo();
    }

    public void changeTaskStatus() {
        printAllTasks();
        System.out.println("Please, enter the id of a task you'd like to change a status for: ");
        int taskId = sc.nextInt();
        sc.nextLine();

        System.out.println("Please, enter the status you want to promote/demote your task to: Created, In Progress, Done");
        String newStatusInput = sc.nextLine().trim().toUpperCase().replace(" ", "_");

        try {
            Task tsk = tasksList.get(taskId - 1);

            Task.Status status = Task.Status.valueOf(newStatusInput);
            tsk.setTaskStatus(status);

        } catch (IllegalArgumentException e) {
            System.out.println("Invalid status entered. Please choose one of: Created, In Progress, Done");
        } catch (IndexOutOfBoundsException e) {
            System.out.println("Task ID not found.");
        } catch (Exception e) {
            System.out.println("An error occurred while changing the task priority: " + e.getMessage());
        }
        selectWhatToDo();
    }

    public void changeTaskPriority() {
        printAllTasks();
        System.out.println("Please, enter the id of the task you'd like to change the priority for: ");
        int taskId = sc.nextInt();
        sc.nextLine();

        System.out.println("Please, enter the new priority you want to set (Low, Moderated, Urgent): ");
        String newPriorityInput = sc.nextLine().trim().toUpperCase().replace(" ", "_");


        try {
            Task task = tasksList.get(taskId - 1);

            Task.Priority priority = Task.Priority.valueOf(newPriorityInput);
            task.setTaskPriority(priority);

        } catch (IllegalArgumentException e) {
            System.out.println("Invalid priority entered. Please choose one of: Low, Moderated, Urgent.");
        } catch (IndexOutOfBoundsException e) {
            System.out.println("Task ID not found.");
        } catch (Exception e) {
            System.out.println("An error occurred while changing the task priority: " + e.getMessage());
        }

        selectWhatToDo();
    }


    public void logOut(){
        System.out.println("Have a nice day!");
    }

}
